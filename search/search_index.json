{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to My Blog!","title":"Home"},{"location":"#welcome-to-my-blog","text":"","title":"Welcome to My Blog!"},{"location":"cp/","text":"Welcome to the Competitive Programming Section To view resources click here","title":"Welcome to the Competitive Programming Section"},{"location":"cp/#welcome-to-the-competitive-programming-section","text":"To view resources click here","title":"Welcome to the Competitive Programming Section"},{"location":"cp/notes_bitmanupulation/","text":"/* Left Shift */ a << b // a * 2^b /* Right Shift */ a >> b // a / 2^b Check if a number is even or odd by using bitwise and operator. if (input_number & 1) cout << \"Odd\" << endl; else cout << \"Even\" << endl;","title":"Notes bitmanupulation"},{"location":"cp/resources/","text":"Resources for Competitive Programming Basics. Here I will try to list resources for starting competitive programming. Programming Language Resources C++ c programming Bangla Tutorials (\u09b8\u09ac\u09be\u09b0 \u099c\u09a8\u09cd\u09af \u09b8\u09bf \u09aa\u09cd\u09b0\u09cb\u0997\u09cd\u09b0\u09be\u09ae\u09bf\u0982) - YouTube Pattern printing in C programming (Bangla) - YouTube C++ Bangla Tutorials - YouTube C++ STL(Standard Template Library) Bangla This playlist is from Shahriar Sadiq vai (CSE-18) STL Full Series (Bangla) | C++ - YouTube This playlist is from CPS Academy Standard Template Library of C++ ( STL ) [ Bangla ] - YouTube Programming Problems for starters This is a list of very easy problems in codeforces.","title":"Resources"},{"location":"cp/resources/#resources-for-competitive-programming-basics","text":"Here I will try to list resources for starting competitive programming.","title":"Resources for Competitive Programming Basics."},{"location":"cp/resources/#programming-language-resources","text":"","title":"Programming Language Resources"},{"location":"cp/resources/#c","text":"c programming Bangla Tutorials (\u09b8\u09ac\u09be\u09b0 \u099c\u09a8\u09cd\u09af \u09b8\u09bf \u09aa\u09cd\u09b0\u09cb\u0997\u09cd\u09b0\u09be\u09ae\u09bf\u0982) - YouTube Pattern printing in C programming (Bangla) - YouTube C++ Bangla Tutorials - YouTube","title":"C++"},{"location":"cp/resources/#c-stlstandard-template-library","text":"","title":"C++ STL(Standard Template Library)"},{"location":"cp/resources/#bangla","text":"This playlist is from Shahriar Sadiq vai (CSE-18) STL Full Series (Bangla) | C++ - YouTube This playlist is from CPS Academy Standard Template Library of C++ ( STL ) [ Bangla ] - YouTube","title":"Bangla"},{"location":"cp/resources/#programming-problems-for-starters","text":"This is a list of very easy problems in codeforces.","title":"Programming Problems for starters"},{"location":"cp/mathematics/mod/","text":"Modular Arithmetic Fast Modular Exponentiation Recursive Approach int fastModularExpo(int a, long long n, int MOD) { // Base case if (n == 0) return 1; if (n % 2 == 0) return fastModularExpo((1LL * a * a) % MOD, n / 2, MOD); return (1LL * a * fastModularExpo(a, n - 1, MOD)) % MOD; }","title":"Modular Arithmetic"},{"location":"cp/mathematics/mod/#modular-arithmetic","text":"","title":"Modular Arithmetic"},{"location":"cp/mathematics/mod/#fast-modular-exponentiation","text":"Recursive Approach int fastModularExpo(int a, long long n, int MOD) { // Base case if (n == 0) return 1; if (n % 2 == 0) return fastModularExpo((1LL * a * a) % MOD, n / 2, MOD); return (1LL * a * fastModularExpo(a, n - 1, MOD)) % MOD; }","title":"Fast Modular Exponentiation"},{"location":"cp/mathematics/prime/","text":"Prime Numbers Primality Test O(n) Complexity bool isPrime(int n) { if(n <=1) return false; for(int i=2; i<n;i++) { if(n%i==0) return false; } return true; } Prime Factorization int f[100], expo[100], len = 0; void primeFact(int n) { // Edge case: n->1 if (n == 1) { f[len] = 2; expo[len] = 0; return; } int d = 2; while (1LL * d * d <= n && n > 1) { int k = 0; while (n % d == 0) { k++; n /= d; } if (k > 0) { f[len] = d; expo[len] = k; len++; } d++; } if (n > 1) { f[len] = n; expo[len] = 1; len++; } } Prime Generator Sieve of Eratosthenes const int Nmax = 100001; bool isPrime[Nmax]; void sieveOfEratosthenes(int n) { for(int i=2; i<=n; i++) { isPrime[i] = true; } for(int i=2; i<= n/2; i++) { if(isPrime[i] == true) { for(int j=i*2; j<=n; j+=i) { isPrime[j] = false; } } } }","title":"Prime Numbers"},{"location":"cp/mathematics/prime/#prime-numbers","text":"","title":"Prime Numbers"},{"location":"cp/mathematics/prime/#primality-test","text":"O(n) Complexity bool isPrime(int n) { if(n <=1) return false; for(int i=2; i<n;i++) { if(n%i==0) return false; } return true; }","title":"Primality Test"},{"location":"cp/mathematics/prime/#prime-factorization","text":"int f[100], expo[100], len = 0; void primeFact(int n) { // Edge case: n->1 if (n == 1) { f[len] = 2; expo[len] = 0; return; } int d = 2; while (1LL * d * d <= n && n > 1) { int k = 0; while (n % d == 0) { k++; n /= d; } if (k > 0) { f[len] = d; expo[len] = k; len++; } d++; } if (n > 1) { f[len] = n; expo[len] = 1; len++; } }","title":"Prime Factorization"},{"location":"cp/mathematics/prime/#prime-generator","text":"Sieve of Eratosthenes const int Nmax = 100001; bool isPrime[Nmax]; void sieveOfEratosthenes(int n) { for(int i=2; i<=n; i++) { isPrime[i] = true; } for(int i=2; i<= n/2; i++) { if(isPrime[i] == true) { for(int j=i*2; j<=n; j+=i) { isPrime[j] = false; } } } }","title":"Prime Generator"},{"location":"cp/stl/","text":"C++ STL (Standard Template Library) Vector Notes from Samin Yasir vai's video JavaPoint STL => link STL Container sort vs stable sort If we need to keep the relative order of the elements fixed, we have to use stable_sort . sort function does not gurantee relative order.","title":"C++ STL (Standard Template Library)"},{"location":"cp/stl/#c-stl-standard-template-library","text":"Vector","title":"C++ STL (Standard Template Library)"},{"location":"cp/stl/#notes-from-samin-yasir-vais-video","text":"JavaPoint STL => link STL Container sort vs stable sort If we need to keep the relative order of the elements fixed, we have to use stable_sort . sort function does not gurantee relative order.","title":"Notes from Samin Yasir vai's video"},{"location":"cp/stl/vector/","text":"C++ STL Vector Special Boolean Vector For bitmasking, the special type can be used. vector<bool> mask; mask.flip(); To fill element of a vector with a specific value fill() function is used. fill function takes three arguments starting point, ending point, value. vector<int> v(10); fill(v.begin(), v.end(), 1); Here v(10) <- 10 is the length.","title":"C++ STL Vector"},{"location":"cp/stl/vector/#c-stl-vector","text":"","title":"C++ STL Vector"},{"location":"cp/stl/vector/#special-boolean-vector","text":"For bitmasking, the special type can be used. vector<bool> mask; mask.flip(); To fill element of a vector with a specific value fill() function is used. fill function takes three arguments starting point, ending point, value. vector<int> v(10); fill(v.begin(), v.end(), 1); Here v(10) <- 10 is the length.","title":"Special Boolean Vector"},{"location":"development/database/postgres/","text":"Postgressql Notes Data Types in Postgres Character Types char(5): Stores up to maximum 5 characters. varchar: Stores any length of characters. varchar(20): Stores up to 20 characters. text: Stores any length of characters. Numeric Types Integers Smallserial: 1 to 32767 (2^15-1) serial: 1 to 214783647 (2^31-1) bigserial: 1 to 9223372036854775807 (2^63-1) Floats decimal numeric real double precision float DATE/TIME Date yyyy-mm-dd format is used. Time Timestamp Interval Represents a duration of time. Other Types Currency Binary JSON Range Geometric Arrays XML UUID To view all data in a table in database, use this query SELECT * from public.customer ORDER BY id ASC To create a type CREATE TYPE sex_type as enum ('M', 'F'); To change type of a column ALTER TABLE customer ALTER COLUMN sex TYPE sex_type USING sex::sex_type; Create an employee table CREATE TABLE sales_person( first_name VARCHAR(30) NOT NULL, last_name VARCHAR(30) NOT NULL, email VARCHAR(60) NOT NULL, street VARCHAR(50) NOT NULL, city VARCHAR(40) NOT NULL, state CHAR(2) NOT NULL, zip SMALLINT NOT NULL, phone VARCHAR(20) NOT NULL, birth_date DATE NOT NULL, sex sex_type NOT NULL, date_hired TIMESTAMP NOT NULL, id SERIAL NOT NULL ); Reference a foreign key CREATE TABLE product( type_id INTEGER REFERENCES product_type(id), name VARCHAR(30) NOT NULL, supplier VARCHAR(30) NOT NULL, description TEXT NOT NULL, id SERIAL PRIMARY KEY );","title":"Postgressql Notes"},{"location":"development/database/postgres/#postgressql-notes","text":"Data Types in Postgres Character Types char(5): Stores up to maximum 5 characters. varchar: Stores any length of characters. varchar(20): Stores up to 20 characters. text: Stores any length of characters. Numeric Types Integers Smallserial: 1 to 32767 (2^15-1) serial: 1 to 214783647 (2^31-1) bigserial: 1 to 9223372036854775807 (2^63-1) Floats decimal numeric real double precision float DATE/TIME Date yyyy-mm-dd format is used. Time Timestamp Interval Represents a duration of time. Other Types Currency Binary JSON Range Geometric Arrays XML UUID To view all data in a table in database, use this query SELECT * from public.customer ORDER BY id ASC To create a type CREATE TYPE sex_type as enum ('M', 'F'); To change type of a column ALTER TABLE customer ALTER COLUMN sex TYPE sex_type USING sex::sex_type; Create an employee table CREATE TABLE sales_person( first_name VARCHAR(30) NOT NULL, last_name VARCHAR(30) NOT NULL, email VARCHAR(60) NOT NULL, street VARCHAR(50) NOT NULL, city VARCHAR(40) NOT NULL, state CHAR(2) NOT NULL, zip SMALLINT NOT NULL, phone VARCHAR(20) NOT NULL, birth_date DATE NOT NULL, sex sex_type NOT NULL, date_hired TIMESTAMP NOT NULL, id SERIAL NOT NULL ); Reference a foreign key CREATE TABLE product( type_id INTEGER REFERENCES product_type(id), name VARCHAR(30) NOT NULL, supplier VARCHAR(30) NOT NULL, description TEXT NOT NULL, id SERIAL PRIMARY KEY );","title":"Postgressql Notes"},{"location":"programming/regex/","text":"Regex (Regular Expression) Notes Regular expression is used for pattern matching or string matching. [abc] // a,b or c [^abc] // any character except a, b or c [a-z] // a to z [A-Z] // A to Z [a-zA-Z] // a to z and A-Z [0-9] // 0 to 9 Quantifiers Tells the computer about repetition in regular expression. [ ]? // Occurs 0 or 1 times [ ]+ // Occurs 1 or more times [ ]* // Occurs 0 or more times [ ]{n} // Occurs n times [ ]{n,} // Occurs n or more times [ ]{x,y} // Occurs x or more times but less than y times Metacharacters \\d // [0-9] \\D // [^0-9] \\w // [a-zA-Z_0-9] \\W // [^\\w] Escape character (\\) Escape character indicates the following character to be considered as a search character. (+, -, ?, *)","title":"Regex (Regular Expression) Notes"},{"location":"programming/regex/#regex-regular-expression-notes","text":"Regular expression is used for pattern matching or string matching. [abc] // a,b or c [^abc] // any character except a, b or c [a-z] // a to z [A-Z] // A to Z [a-zA-Z] // a to z and A-Z [0-9] // 0 to 9","title":"Regex (Regular Expression) Notes"},{"location":"programming/regex/#quantifiers","text":"Tells the computer about repetition in regular expression. [ ]? // Occurs 0 or 1 times [ ]+ // Occurs 1 or more times [ ]* // Occurs 0 or more times [ ]{n} // Occurs n times [ ]{n,} // Occurs n or more times [ ]{x,y} // Occurs x or more times but less than y times","title":"Quantifiers"},{"location":"programming/regex/#metacharacters","text":"\\d // [0-9] \\D // [^0-9] \\w // [a-zA-Z_0-9] \\W // [^\\w] Escape character (\\) Escape character indicates the following character to be considered as a search character. (+, -, ?, *)","title":"Metacharacters"}]}